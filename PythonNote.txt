==============================================================================
백준
Python1652:
    깊은 복사, 얕은 복사 주의하기

Python4949: 
    if char in "([":  # 여는 괄호일 때 ---> if문을 이렇게 쓸 수도 있네?
    if not stack:  # 스택이 비어있으면 올바른 괄호가 아님 ---> stack = [] 으로 선언했는데 이렇게 할 수도 있네 

Python11650:
    PlusList.sort(reverse=False) ---> 오름차순 정렬
    MinusList.sort(reverse=True) ---> 내림차순 정렬

    result = f"{a}{i:06d}"  # i를 6자리 숫자로 맞춰서 합침

    ```GPT
    f-string에서 숫자를 포맷팅할 때 사용할 수 있는 몇 가지 설정 옵션이 있습니다. 아래에 몇 가지 주요 옵션을 설명해드릴게요:

    1. 정수 포맷팅:
    - `d`: 10진수 정수로 포맷팅합니다.
    - `b`: 2진수로 포맷팅합니다.
    - `o`: 8진수로 포맷팅합니다.
    - `x`: 소문자 16진수로 포맷팅합니다.
    - `X`: 대문자 16진수로 포맷팅합니다.

    2. 소수 포맷팅:
    - `f`: 소수점 형식으로 포맷팅합니다.
    - `.nf`: 소수점 이하 n자리까지 포맷팅합니다.

    3. 정렬과 너비 설정:
    - `:n`: 전체 너비를 n으로 지정합니다.
    - `<`: 왼쪽 정렬합니다.
    - `>`: 오른쪽 정렬합니다.
    - `^`: 가운데 정렬합니다.

    4. 부호와 0 채우기:
    - `+`: 양수일 때도 부호를 표시합니다.
    - `-`: 음수일 때만 부호를 표시합니다.
    - ` ` (공백): 양수일 때는 부호를 표시하지 않고 공백을 표시합니다.
    - `0`: 빈 자리를 0으로 채웁니다.

    예를 들어, 소수를 포맷팅하거나 정렬을 조절하고자 할 때 이러한 옵션들을 활용할 수 있습니다. 포맷팅 옵션을 함께 사용하여 원하는 형식으로 문자열을 생성할 수 있습니다.
    ```
    ```py
    a=int(input())
    b=[list(map(int,input().split())) for i in range(a)]
    b.sort()
    for i in b:
        print(*i)
    ```
    와 i가 b를 참조해서 도니까 포인터를 쓸 수 있구나

Python15312:
    문자열의 자릿수 지정은 ':' 안 써도 된다.
    ord(문자): 아스키 코드로 반환
    chr(아스키 코드 값): 문자로 반환

Python12871:
    유클리드 호제법을 이용해 최소공배수를 구한다.
    ```py
    # 유클리드 호제법
    # 최대공약수
    def GCD(x, y):
        while y:
            x, y = y, x % y
        return x
    # 최소공배수
    def LCM(x, y):
        result = (x * y) // GCD(x, y)
        return result
    ```
        문자열을 Queue형태로 만드는 방법
    ```py
    from collections import deque
    FirstQueue = deque(FirstText)
    SecondQueue = deque(SecondText)
    ```
    Queue에서 pop하면 맨 마지막에 넣은게 빠지고, insert(0, 값)하면 맨 앞에 넣어지고, append(값)하면 맨 뒤에 넣어진다.
    이런 실수가 없으려면 다음부터는 Deque를 쓰자.
    
Python18870:
    ```py
    dic = {}  # [값, 순서]
    num = 0
    for i in range(size):
        if temp[i] in dic: <<-------------------
            continue
        else:
            dic[temp[i]] = num
            num += 1
    ```
    dictionary 안에 값이 존재하는지 확인할 때에는 위와 같이 쓴다.
    내가 실수한 것: dic[temp[i]] != None
==============================================================================
프로그래머스
Python_더 크게 합치기:
    ```py
    int(max(f"{a}{b}", f"{b}{a}"))
    ```
    나도 max를 잘 활용하자

==============================================================================
환경 설정
VS Code 인터프리터 변경
    https://blog.joonas.io/235